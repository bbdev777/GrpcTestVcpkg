
#pragma once
#include <future>
#include <grpcpp/grpcpp.h>

#include "test_grpc_service.grpc.pb.h" //Autogenerated


namespace TestGrpcService
{
    class TestGrpsServer : public TestGrpcService::TestGrpc::Service
    {
	public:
	TestGrpsServer()
	{
	}
	virtual ~TestGrpsServer() {};

	//RPC method (override of autogenerated method)
	grpc::Status  ConvertIntToString(grpc::ServerContext* context,
	const TestGrpcService::ConversionRequest* request,
	TestGrpcService::ConversionResponse* response) override
	{
	    int intValue = request->int_value();

	    response->set_string_value(std::to_string(intValue));

	    return grpc::Status::OK;
	}

	//RPC method (override of autogenerated method)
	grpc::Status  CalculateAvgValueByArray(grpc::ServerContext* context,
	const TestGrpcService::ArrayAvgRequest* request,
	TestGrpcService::ArrayAvgResponse* response) override
	{
		int size = request->int_value_size();
		int	sum = 0;

		for (int i = 0; i < size; i++)
		{
			sum += request->int_value(i);
		}

		double avg = (double)sum / (double)size;

		response->set_avg_value(avg);

	    return grpc::Status::OK;
	}

	grpc::Status  StopServer(grpc::ServerContext* context, 
		const google::protobuf::Empty*, 
		google::protobuf::Empty*) override
	{

		exitRequested.set_value();

		return grpc::Status::OK;
	}

	void WaitForExit()
	{
		exitRequested.get_future().wait();
	}
	
	private:

		std::promise<void> exitRequested;
    };
}
