cmake_minimum_required(VERSION 3.5)

#set(CMAKE_TOOLCHAIN_FILE "/opt/vcpkg/scripts/buildsystems/vcpkg.cmake")
#set(VCPKG_TARGET_TRIPLET x64-linux CACHE STRING "VCPKG Target Triplet to use")


set(ProjectName "GrpcTest")

project(${ProjectName})

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Threads REQUIRED)
find_package(gRPC CONFIG REQUIRED)

###############################################################
# Generating RPC objects
###############################################################
include(GrpcLib/cmake/protobuf_grpc.cmake)

set(proto_FILES
		${CMAKE_CURRENT_LIST_DIR}/GrpcLib/proto/test_grpc_messages.proto
		${CMAKE_CURRENT_LIST_DIR}/GrpcLib/proto/test_grpc_service.proto
	)

	protobuf_generate_cpp(proto_SRCS proto_HDRS
		${proto_FILES})

	PROTOBUF_GENERATE_GRPC_CPP(grpc_SRCS grpc_HDRS
		${proto_FILES})

	add_library(${PROJECT_NAME}.GRPC STATIC
		${proto_SRCS}
		${proto_HDRS}
		${grpc_SRCS}
		${grpc_HDRS})

	target_include_directories(${PROJECT_NAME}.GRPC
		PUBLIC
			${CMAKE_CURRENT_BINARY_DIR})

	target_link_libraries(${PROJECT_NAME}.GRPC
		PUBLIC
		gRPC::grpc++
		protobuf::libprotobuf)
###############################################################

###############################################################
# GrpcLib wrapper around autogenerated classes
###############################################################
	add_library(${PROJECT_NAME}.GrpcLib STATIC
			GrpcLib/src/TestGrpcLib.cpp
	)

	target_include_directories(${PROJECT_NAME}.GrpcLib
		PUBLIC
			GrpcLib/src/
		)

	target_link_libraries(${PROJECT_NAME}.GrpcLib
		PUBLIC
			${PROJECT_NAME}.GRPC
		)
###############################################################

###############################################################
# Test server app
###############################################################
add_executable(${ProjectName}.Server
	"./TestServer/main.cpp")

target_include_directories(${ProjectName}.Server
	PUBLIC
		${IncludeRoot}
	PRIVATE
		${CMAKE_CURRENT_BINARY_DIR}
)

target_link_libraries(${ProjectName}.Server
	PUBLIC
	${PROJECT_NAME}.GrpcLib
)
###############################################################

###############################################################
# Test client app
###############################################################
add_executable(${ProjectName}.Client
	"./TestClient/main.cpp")

target_include_directories(${ProjectName}.Client
	PUBLIC
		${IncludeRoot}
	PRIVATE
		${CMAKE_CURRENT_BINARY_DIR}
)

target_link_libraries(${ProjectName}.Client
	PUBLIC
	${PROJECT_NAME}.GrpcLib
)
###############################################################

